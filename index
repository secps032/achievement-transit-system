<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>6E Achievement Transit System</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: '#5D5CDE',
                    }
                }
            }
        }
    </script>
    <style>
        .train-line {
            background: linear-gradient(90deg, var(--line-color) 0%, var(--line-color) 100%);
        }
        
        .station {
            transition: all 0.3s ease;
            cursor: pointer;
        }
        
        .station:hover {
            transform: scale(1.1);
        }
        
        .station.completed {
            background: var(--line-color);
            border-color: var(--line-color);
        }
        
        .station.incomplete {
            background: white;
            border: 3px solid var(--line-color);
        }
        
        .dark .station.incomplete {
            background: #1f2937;
        }
        
        .train {
            width: 80px;
            height: 60px;
            position: relative;
            cursor: pointer;
            transition: all 0.3s ease;
            z-index: 20;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .train:hover {
            transform: scale(1.1);
        }
        
        .train img {
            width: 100%;
            height: 100%;
            object-fit: contain;
            filter: drop-shadow(0 2px 8px rgba(0,0,0,0.3));
        }
        
        .track-container {
            position: relative;
            height: 60px;
            display: flex;
            align-items: center;
        }
        
        @media (max-width: 640px) {
            .train-icon {
                width: 45px;
                height: 35px;
                font-size: 12px;
            }
            
            .station {
                width: 20px;
                height: 20px;
            }
        }
    </style>
</head>
<body class="bg-gradient-to-br from-blue-50 to-blue-100 dark:from-gray-900 dark:to-gray-800 min-h-screen">
    <!-- Dark mode detection -->
    <script>
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            document.documentElement.classList.add('dark');
        }
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {
            if (event.matches) {
                document.documentElement.classList.add('dark');
            } else {
                document.documentElement.classList.remove('dark');
            }
        });
    </script>

    <div class="container mx-auto px-4 py-8">
        <!-- Header -->
        <div class="bg-blue-900 text-white rounded-t-3xl p-6 mb-0">
            <div class="flex items-center space-x-4">
                <div class="w-16 h-16 bg-red-600 rounded-full flex items-center justify-center text-2xl font-bold">
                    6E
                </div>
                <h1 class="text-3xl md:text-4xl font-bold">Achievement Transit System</h1>
            </div>
        </div>

        <!-- Main Content -->
        <div class="bg-white dark:bg-gray-800 rounded-b-3xl shadow-2xl p-6">
            <!-- Controls -->
            <div class="mb-6 flex flex-wrap gap-4 justify-between items-center">
                <div class="flex gap-2">
                    <button onclick="resetProgress()" class="px-4 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded-lg transition-colors">
                        Reset All
                    </button>
                    <button onclick="saveProgress()" class="px-4 py-2 bg-primary hover:bg-blue-600 text-white rounded-lg transition-colors">
                        Save Progress
                    </button>
                </div>
                <div class="text-sm text-gray-600 dark:text-gray-400">
                    Click trains to advance or click stations to jump
                </div>
            </div>

            <!-- Transit Lines -->
            <div class="space-y-6" id="transitLines">
                <!-- Lines will be generated by JavaScript -->
            </div>

            <!-- Progress Summary -->
            <div class="mt-8 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200 mb-3">Progress Summary</h3>
                <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4" id="progressSummary">
                    <!-- Progress bars will be generated by JavaScript -->
                </div>
            </div>
        </div>
    </div>

    <script>
        const groups = [
            { 
                id: 1, 
                name: 'Group 1', 
                color: '#22c55e',
                trainImage: 'https://pfst.cf2.poecdn.net/base/image/b3766d249421698d8a8693acebea980b89cc5cabefb8065c27f04c4285d632b3?w=925&h=925'
            },
            { 
                id: 2, 
                name: 'Group 2', 
                color: '#7c3aed',
                trainImage: 'https://pfst.cf2.poecdn.net/base/image/1c512a9e975f38d23e6552151c4c32b6bed1542ddc0a38746a399733fb38d6f0?w=699&h=895'
            },
            { 
                id: 3, 
                name: 'Group 3', 
                color: '#3b82f6',
                trainImage: 'https://pfst.cf2.poecdn.net/base/image/bf513a35300f046fe7f27ca24d9b42a83c1df46a342d3e1700a323e267fd3199?w=1320&h=1164'
            },
            { 
                id: 4, 
                name: 'Group 4', 
                color: '#ef4444',
                trainImage: 'https://pfst.cf2.poecdn.net/base/image/42d8895621659acd8c2beed9036d8d22767ebe6990d2710d10878576e135d6c4?w=1222&h=1148'
            },
            { 
                id: 5, 
                name: 'Group 5', 
                color: '#ec4899',
                trainImage: 'https://pfst.cf2.poecdn.net/base/image/c2c5afee4f83f891e37b048b7bc6fd8db2a741ea6c89e27ed0b97e3226fd0005?w=1334&h=1253'
            },
            { 
                id: 6, 
                name: 'Group 6', 
                color: '#f97316',
                trainImage: 'https://pfst.cf2.poecdn.net/base/image/4e319d5d2ec634b8100cc572559d7726c65f7e1f0ea98c9d5c2654b7fd4e55ec?w=1118&h=1050'
            }
        ];

        let progress = {};

        // Initialize progress data
        function initializeProgress() {
            const saved = localStorage.getItem('transitProgress');
            if (saved) {
                progress = JSON.parse(saved);
            } else {
                groups.forEach(group => {
                    progress[group.id] = 0; // Progress is now a number from 0-10
                });
            }
        }

        // Create transit line HTML with individual tracks
        function createTransitLine(group) {
            const currentProgress = progress[group.id];
            const trainPosition = (currentProgress / 10) * 100; // Convert to percentage
            
            // Create station markers
            const stations = Array(11).fill(0).map((_, index) => {
                return `
                    <div class="absolute w-5 h-5 bg-white rounded-full border-4 border-black"
                         style="left: ${(index / 10) * 100}%; top: 50%; transform: translate(-50%, -50%); z-index: 10; cursor: pointer;"
                         onclick="moveTrainToStation(${group.id}, ${index})"
                         title="Station ${index}">
                    </div>
                `;
            }).join('');

            return `
                <div class="transit-line-container mb-8">
                    <div class="flex items-center space-x-4">
                        <!-- Group Label -->
                        <div class="w-20 text-sm font-medium text-gray-700 dark:text-gray-300">
                            ${group.name}
                        </div>
                        
                        <!-- Track with Train -->
                        <div class="flex-1 track-container">
                            <!-- Track Line -->
                            <div class="absolute top-1/2 left-0 right-0 h-2 train-line rounded-full" 
                                 style="--line-color: ${group.color}; transform: translateY(-50%); z-index: 5;"></div>
                            
                            <!-- Station Markers -->
                            ${stations}
                            
                            <!-- Moving Train -->
                            <div class="train absolute" 
                                 style="left: ${trainPosition}%; top: 50%; transform: translate(-50%, -50%);"
                                 onclick="advanceTrain(${group.id})"
                                 title="Click to advance or drag to move">
                                <img src="${group.trainImage}" alt="${group.name} Train" />
                            </div>
                        </div>
                        
                        <!-- Progress Display -->
                        <div class="w-12 text-center text-sm font-medium text-gray-700 dark:text-gray-300">
                            ${currentProgress}/10
                        </div>
                    </div>
                </div>
            `;
        }

        // Advance train by one station
        function advanceTrain(groupId) {
            if (progress[groupId] < 10) {
                progress[groupId]++;
                renderTransitLines();
                updateProgressSummary();
                saveProgress();
                
                // Add a little animation effect
                showNotification(`${groups.find(g => g.id === groupId).name} advanced to station ${progress[groupId]}!`, 'success');
            }
        }

        // Move train to specific station
        function moveTrainToStation(groupId, stationIndex) {
            progress[groupId] = stationIndex;
            renderTransitLines();
            updateProgressSummary();
            saveProgress();
            
            if (stationIndex === 10) {
                showNotification(`🎉 ${groups.find(g => g.id === groupId).name} completed all stations!`, 'success');
            }
        }

        // Render all transit lines
        function renderTransitLines() {
            const container = document.getElementById('transitLines');
            container.innerHTML = groups.map(group => createTransitLine(group)).join('');
        }

        // Update progress summary
        function updateProgressSummary() {
            const container = document.getElementById('progressSummary');
            container.innerHTML = groups.map(group => {
                const completed = progress[group.id];
                const percentage = (completed / 10) * 100;
                
                return `
                    <div class="text-center">
                        <div class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">${group.name}</div>
                        <div class="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-3 mb-1">
                            <div class="h-3 rounded-full transition-all duration-300" 
                                 style="width: ${percentage}%; background-color: ${group.color}"></div>
                        </div>
                        <div class="text-xs text-gray-600 dark:text-gray-400">${completed}/10</div>
                    </div>
                `;
            }).join('');
        }

        // Save progress to localStorage
        function saveProgress() {
            localStorage.setItem('transitProgress', JSON.stringify(progress));
            showNotification('Progress saved!', 'success');
        }

        // Reset all progress
        function resetProgress() {
            showConfirmDialog('Are you sure you want to reset all progress?', () => {
                groups.forEach(group => {
                    progress[group.id] = 0;
                });
                renderTransitLines();
                updateProgressSummary();
                localStorage.removeItem('transitProgress');
                showNotification('All trains returned to starting station!', 'info');
            });
        }

        // Show notification
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            const bgColor = type === 'success' ? 'bg-green-500' : type === 'error' ? 'bg-red-500' : 'bg-blue-500';
            
            notification.className = `fixed top-4 right-4 ${bgColor} text-white px-6 py-3 rounded-lg shadow-lg z-50 transform transition-transform duration-300 translate-x-full`;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            // Animate in
            setTimeout(() => {
                notification.classList.remove('translate-x-full');
            }, 100);
            
            // Animate out and remove
            setTimeout(() => {
                notification.classList.add('translate-x-full');
                setTimeout(() => notification.remove(), 300);
            }, 2000);
        }

        // Show confirm dialog
        function showConfirmDialog(message, onConfirm) {
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
            modal.innerHTML = `
                <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg max-w-sm w-full mx-4">
                    <p class="text-gray-700 dark:text-gray-300 mb-4">${message}</p>
                    <div class="flex justify-end space-x-3">
                        <button class="px-4 py-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors" onclick="this.closest('.fixed').remove()">Cancel</button>
                        <button class="px-4 py-2 bg-red-500 text-white hover:bg-red-600 rounded transition-colors" onclick="this.closest('.fixed').remove(); (${onConfirm})()">Confirm</button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
        }

        // Initialize the app
        initializeProgress();
        renderTransitLines();
        updateProgressSummary();
    </script>
</body>
</html>
